pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/a-efstathiou/DevSecOps-pipeline-vulnado.git'
            }
        }
        stage('TruffleHog Secret Scan') {
            steps {
                script {
                    echo "Running TruffleHog Scan"
                    // Get the current repository URL
                    def repoUrl = sh(script: 'git config --get remote.origin.url', returnStdout: true).trim()
                    def branchName = sh(script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim()
                    echo "Repository URL: ${repoUrl}"
                    echo "Branch Name: ${branchName}"

                    // This command runs TruffleHog in a Docker container, scanning the GitHub organization
                    // sh '''
                    // docker run --rm -it -v "$PWD:/pwd" trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys --fail
                    // '''

                    sh '''
                    docker run --rm -it -v "$PWD:/pwd" trufflesecurity/trufflehog:latest github --repo ${repoUrl} --fail
                    '''
                     
                }
            }
        }
        stage('Build') {
            steps {
                echo "Building"
            }
        }
        stage("Test") {
            steps {
                echo "Testing"
            }
        }
        stage("Deliver") {
            steps {
                echo "Deliver"
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            // Perform cleanup or archive reports
        }
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
    }
}