pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/a-efstathiou/DevSecOps-pipeline-vulnado.git'
            }
        }
         stage('Checkout2') {
                    steps {
                        checkout scm
                    }
                }
       stage('Build') {
            steps {
                echo "Building....."
            }
        }

        stage('SonarQube Scan') {
            steps {
                withSonarQubeEnv(installationName: 'sonarQube1') {
                    script {
                        echo "Running SonarQube Scan"

                        sh 'rm -f sonar-report.txt'

                        // Compile the code
                        sh './mvnw clean compile'

                        sh './mvnw org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.0.2155:sonar -Dsonar.java.binaries=target/classes > sonar-report.txt'

                        def sonarReport = readFile 'sonar-report.txt'

                        if (sonarReport.length() == 0) {
                            echo "SonarQube Scan completed successfully. No issues found."
                        } else {
                            echo "SonarQube scan found issues. Check the report."
                        }
                    }
                }
            }
        }


        stage('Version Docker ') {
                    steps {
                         sh 'docker --version'
                    }
                }


                stage('Run Nmap-Vuln Scan-Opened Ports-Vulnerabilites') {
                    steps {
                        script {
                            sh """
                    docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v ${PWD}:/usr/src/myapp -w /usr/src/myapp nikolaskir2000/nmap_image_3:latest -sV --script vuln 192.168.2.11 -p 80,223,8080,8082

                            """
                        }
                    }
                }





        stage("Deliver") {
            steps {
                echo "Deliver"
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            // Perform cleanup or archive reports
        }
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
    }
}