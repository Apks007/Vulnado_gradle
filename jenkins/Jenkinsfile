pipeline {
    agent any
    environment {
        REPO_URL = ''
        CURR_BRANCH = ''
        workspace = ''
    }
    stages {
        stage ('Checkout SCM') 
        {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script {
                        checkout scm
                        workspace = pwd ()
                    }
                }
            }
        }
        stage('TruffleHog Secret Scan') {
            steps {
                script {
                    echo "Getting git repo info"
                    // Get the current repository URL
                    REPO_URL = sh(script: 'git config --get remote.origin.url', returnStdout: true).trim()
                    CURR_BRANCH = sh(script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim()

                    // This command runs TruffleHog in a Docker container, scanning the GitHub organization
                    // sh '''
                    // docker run --rm -it -v "$PWD:/pwd" trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys --fail
                    // '''

                    // sh '''
                    // docker run --rm -it -v "$PWD:/pwd" trufflesecurity/trufflehog:latest git $PWD --fail
                    // '''
                    
                }
                script {
                    echo "Running Trufflehog Scan"
                    sh 'rm -f trufflehog'
                    sh '''
                    docker run --rm -it -v "$PWD:/pwd" trufflesecurity/trufflehog:latest git file:///pwd --fail > trufflehog
                    '''
                    def truffle = readFile "trufflehog"
                     
                    if (truffle.length() == 0) {
                        echo "Good to go. No secrets found" 
                    }
                    else {
                        echo "Warning! Secrets are committed into your git repository."
                        throw new Exception("Secrets might be committed into your git repo")
                    }
                }
            }
        }
        stage('Build') {
            steps {
                echo "Building"
            }
        }
        stage("Test") {
            steps {
                echo "Testing"
            }
        }
        stage("Deliver") {
            steps {
                echo "Deliver"
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            // Perform cleanup or archive reports
        }
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
    }
}