pipeline {
    agent any
    environment {
        REPO_URL = ''
        CURR_BRANCH = ''
        workspace = ''
    }
    stages {
        stage ('Checkout SCM') 
        {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script {
                        checkout scm
                        workspace = pwd ()
                    }
                }
            }
        }
        stage('Setting Environment Variables') {
            steps {
                script {
                        echo "Getting git repo info"
                        // Get the current repository URL
                        REPO_URL = sh(script: 'git config --get remote.origin.url', returnStdout: true).trim()
                        CURR_BRANCH = sh(script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim()

                        sh(script: 'git rev-parse --show-toplevel', returnStdout: true).trim()          
                    }
            }   
        }
        stage('TruffleHog Secret Scan') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {                
                    script {

                        def stagedFiles = sh(script: 'git diff --staged --name-only', returnStdout: true).trim()
                        
                        if(stagedFiles) {
                            echo "Running TruffleHog scan on the following files: ${stagedFiles}"

                            sh 'rm -f trufflehog_results.txt'

                            // Loop through the staged files and run TruffleHog on each
                            for (file in stagedFiles.split('\n')) {
                                echo "Scanning file: ${file}"
                                
                                // Run TruffleHog scan on each staged file using filesystem scan
                                sh """
                                docker run --rm -v "${workspace}:/workspace" trufflesecurity/trufflehog:latest \
                                filesystem --path /workspace/${file} >> trufflehog_results.txt
                                """
                            }
                        }

                        echo "Running Trufflehog Scan"
                        sh 'rm -f trufflehog'

                        sh """ 
                        docker run --rm -v "${workspace}:/workspace" trufflesecurity/trufflehog:latest \
                        git ${REPO_URL} --branch ${CURR_BRANCH} > trufflehog
                        """
                        def truffle = readFile "trufflehog" 
                        
                        if (truffle.length() == 0) {
                            echo "Good to go. No secrets found" 
                        }
                        else {
                            echo "Warning! Secrets are committed into your git repository."
                            throw new Exception("Secrets might be committed into your git repo")
                        }
                    }
                }
            }
        }
        stage('Build') {
            steps {
                echo "Building"
            }
        }
        stage("Test") {
            steps {
                echo "Testing"
            }
        }
        stage("Deliver") {
            steps {
                echo "Deliver"
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            // Perform cleanup or archive reports
        }
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
    }
}