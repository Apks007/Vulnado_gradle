pipeline {
    agent {
        node {
            label 'docker-agent-alpine'
        }
    }
    environment {
        REPO_URL = ''
        CURR_BRANCH = ''
        workspace = ''
    }
    stages {
        // stage('Install Docker Client') {
        //     steps {
        //         sh '''
        //         apk add --no-cache docker-cli  # Install Docker client in the Alpine container
        //         '''
        //     }
        // }
        stage ('Checkout SCM') 
        {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script {
                        checkout scm
                        workspace = pwd ()
                    }
                }
            }
        }
        stage('TruffleHog Secret Scan') {
            steps {
                script {
                    echo "Running TruffleHog Scan"
                    // Get the current repository URL
                    REPO_URL = sh(script: 'git config --get remote.origin.url', returnStdout: true).trim()
                    CURR_BRANCH = sh(script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim()

                    // This command runs TruffleHog in a Docker container, scanning the GitHub organization
                    // sh '''
                    // docker run --rm -it -v "$PWD:/pwd" trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys --fail
                    // '''

                    // sh '''
                    // docker run --rm -it -v "$PWD:/pwd" trufflesecurity/trufflehog:latest git $PWD --fail
                    // '''

                    sh '''
                    docker ps
                    '''
                     
                }
            }
        }
        stage('Build') {
            steps {
                echo "Building"
            }
        }
        stage("Test") {
            steps {
                echo "Testing"
            }
        }
        stage("Deliver") {
            steps {
                echo "Deliver"
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            // Perform cleanup or archive reports
        }
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
    }
}